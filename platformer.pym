"""
platformer.py
Author: Jack Meehan
Credit: Mr. Dennison's Sample Program (no other credit because specific to ggame)
Assignment:
Write and submit a program that implements the sandbox platformer game:
https://github.com/HHS-IntroProgramming/Platformer
"""
from ggame import App, Color, LineStyle, Sprite, RectangleAsset, CircleAsset, EllipseAsset, PolygonAsset, ImageAsset, Frame
from math import floor

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 800

i = None
j = None
Player = None

rightkeydisabled = False
leftkeydisabled = False
upkeydisabled = False

for i in range(69):
    blue = Color(0x2EFEC8, 1.0)
    black = Color(0x000000, 1.0)
    pink = Color(0xFF00FF, 1.0)
    red = Color(0xFF5733, 1.0)
    white = Color(0xFFFFFF, 1.0)
    red = Color(0xff0000, 1.0)
    green = Color(0x00ff00, 1.0)
    blue = Color(0x0000ff, 1.0)
    black = Color(0x000000, 1.0)
    white = Color(0xffffff, 1.0)
    grey = Color(0xC0C0C0, 1.0)
    thinline = LineStyle(2, black)
    blkline = LineStyle(1, black)
    noline = LineStyle(0, white)
    coolline = LineStyle(1, grey)
    blueline = LineStyle(2, blue)
    redline = LineStyle(1, red)
    greenline = LineStyle(1, green)
    gridline = LineStyle(2, black)
    grid = RectangleAsset(30, 30, gridline, white)
    box = RectangleAsset(30, 30, gridline, black)

class platformer(App):

    def step(self):
        global Player
        if Player:
            Player.step()

class player(Sprite):
    def __init__(self, color, height, width, x, y):
        self.c = color
        self.h = height
        self.w = width
        self.vy = 0
        self.vx = 0
        box = RectangleAsset(self.w, self.h, gridline, self.c)
        super().__init__(box, (x, y))
    def step(self):
        global rightkeydisabled
        global leftkeydisabled
        global upkeydisabled
        self.vy += .2
        collidinglist = self.collidingWithSprites(block)
        if not collidinglist:
            upkeydisabled = True
            
        if collidinglist:
            self.vx = 0
            self.vy = -.2
            rightkeydisabled = False
            leftkeydisabled = False
            upkeydisabled = False
            h = floor(self.x/50)*50
            k = floor(self.y/50)*50
            self.y = k
            

        
        collidinglist2 = self.collidingWithSprites(spring)
        if collidinglist2:
            if self.vy>0:
                self.vy = -10

        self.y += self.vy
        self.x += self.vx
        

def step():
    global Player
    if Player:
        Player.step()
    global Spring
    if Spring:
        Spring.step()

def rightKey(event):
    global Player
    if not rightkeydisabled:
        Player.x += 2
        Player.vx = 4
def leftKey(event):
    global Player
    if not leftkeydisabled:
        Player.x += -2
        Player.vx = -4
def upKey(event):
    global Player
    if not upkeydisabled:
        Player.vy = -9

def mouseMove(event):
    global i 
    global j
    i = event.x
    j = floor(event.y/50)*50
def spaceKey(event):
    global Player
    global i
    global j
    if not Player:
        Player = player(red, 50, 20, i, j)

class block(Sprite):
    def __init__(self, color1, height1, width1, x, y):
        self.c = color1
        self.h = height1
        self.w = width1
        box = RectangleAsset(self.w, self.h, gridline, self.c)
        super().__init__(box, (x, y))
def mouseClick(event):
    i = floor(event.x/50)*50
    j = floor(event.y/50)*50
    block(black, 50, 50, i, j)
    
class spring(Sprite):
    def __init__(self, color2, height2, width2, x, y):
        self.c = color2
        self.h = height2
        self.w = width2
        self.vy = 0
        box = RectangleAsset(self.w, self.h, gridline, self.c)
        super().__init__(box, (x, y)) 
    def step(self):
        self.vy += .2
        collidinglist3 = self.collidingWithSprites(block)
        if collidinglist3:
            self.vy = 0
        self.y += self.vy

def mouseMove(event):
    global i 
    global j
    i = event.x
    j = floor(event.y/50)*50
def sKey(event):
    global Spring
    global i
    global j
    if not Spring:
        Spring = spring(blue, 15, 20, i, j)

myapp = platformer()
myapp.listenMouseEvent('click', mouseClick)
myapp.listenMouseEvent('mousemove', mouseMove)
myapp.listenKeyEvent('keydown', 'space', spaceKey)
myapp.listenKeyEvent('keydown', 'up arrow', upKey)
myapp.listenKeyEvent('keydown', 'right arrow', rightKey)
myapp.listenKeyEvent('keydown', 'left arrow', leftKey)
myapp.listenKeyEvent('keydown', 's', sKey)
myapp.run(step)
